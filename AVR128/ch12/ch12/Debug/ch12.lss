
ch12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c89  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088c  00000000  00000000  0000104d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a1  00000000  00000000  000018d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004df  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003aa  00000000  00000000  000022db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002685  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	53 d0       	rcall	.+166    	; 0x140 <main>
  9a:	0d c1       	rjmp	.+538    	; 0x2b6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z11lcd_controlh>:
	while(*string != '\0')
	{
		lcd_write_char(*string);
		string++;
	}
}
  9e:	e5 e6       	ldi	r30, 0x65	; 101
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	9d 7f       	andi	r25, 0xFD	; 253
  a6:	90 83       	st	Z, r25
  a8:	90 81       	ld	r25, Z
  aa:	9e 7f       	andi	r25, 0xFE	; 254
  ac:	90 83       	st	Z, r25
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	8f e9       	ldi	r24, 0x9F	; 159
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <_Z11lcd_controlh+0x1c>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_Z11lcd_controlh+0x22>
  c0:	00 00       	nop
  c2:	80 81       	ld	r24, Z
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <_Z8lcd_initv>:
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  d2:	12 ba       	out	0x12, r1	; 18
  d4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <_Z8lcd_initv+0x12>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_Z8lcd_initv+0x18>
  e2:	00 00       	nop
  e4:	88 e3       	ldi	r24, 0x38	; 56
  e6:	db df       	rcall	.-74     	; 0x9e <_Z11lcd_controlh>
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	d9 df       	rcall	.-78     	; 0x9e <_Z11lcd_controlh>
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	d7 df       	rcall	.-82     	; 0x9e <_Z11lcd_controlh>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	d5 df       	rcall	.-86     	; 0x9e <_Z11lcd_controlh>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	d3 cf       	rjmp	.-90     	; 0x9e <_Z11lcd_controlh>
  f8:	08 95       	ret

000000fa <_Z14lcd_write_charh>:
  fa:	e5 e6       	ldi	r30, 0x65	; 101
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	9d 7f       	andi	r25, 0xFD	; 253
 102:	90 83       	st	Z, r25
 104:	90 81       	ld	r25, Z
 106:	91 60       	ori	r25, 0x01	; 1
 108:	90 83       	st	Z, r25
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	80 81       	ld	r24, Z
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	80 83       	st	Z, r24
 112:	8f e9       	ldi	r24, 0x9F	; 159
 114:	9f e0       	ldi	r25, 0x0F	; 15
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <_Z14lcd_write_charh+0x1c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_Z14lcd_write_charh+0x22>
 11c:	00 00       	nop
 11e:	80 81       	ld	r24, Z
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <_Z12lcd_positionhh>:
 126:	62 30       	cpi	r22, 0x02	; 2
 128:	08 f0       	brcs	.+2      	; 0x12c <_Z12lcd_positionhh+0x6>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	80 31       	cpi	r24, 0x10	; 16
 12e:	08 f0       	brcs	.+2      	; 0x132 <_Z12lcd_positionhh+0xc>
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	61 11       	cpse	r22, r1
 134:	02 c0       	rjmp	.+4      	; 0x13a <_Z12lcd_positionhh+0x14>
 136:	80 58       	subi	r24, 0x80	; 128
 138:	01 c0       	rjmp	.+2      	; 0x13c <_Z12lcd_positionhh+0x16>
 13a:	80 54       	subi	r24, 0x40	; 64
 13c:	b0 cf       	rjmp	.-160    	; 0x9e <_Z11lcd_controlh>
 13e:	08 95       	ret

00000140 <main>:
#include <util/LCD.h>


int main(void)
{
	lcd_init();
 140:	c4 df       	rcall	.-120    	; 0xca <_Z8lcd_initv>
	int second = 55;
	int minute = 59;
	int hour = 11;
	int AMPM = 1;
 142:	cc 24       	eor	r12, r12
 144:	c3 94       	inc	r12
 146:	d1 2c       	mov	r13, r1
int main(void)
{
	lcd_init();
	int second = 55;
	int minute = 59;
	int hour = 11;
 148:	0f 2e       	mov	r0, r31
 14a:	fb e0       	ldi	r31, 0x0B	; 11
 14c:	ef 2e       	mov	r14, r31
 14e:	f1 2c       	mov	r15, r1
 150:	f0 2d       	mov	r31, r0

int main(void)
{
	lcd_init();
	int second = 55;
	int minute = 59;
 152:	0b e3       	ldi	r16, 0x3B	; 59
 154:	10 e0       	ldi	r17, 0x00	; 0


int main(void)
{
	lcd_init();
	int second = 55;
 156:	c7 e3       	ldi	r28, 0x37	; 55
 158:	d0 e0       	ldi	r29, 0x00	; 0
	int AMPM = 1;
	
	
	while (1)
	{
		lcd_position(12,1);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	e3 df       	rcall	.-58     	; 0x126 <_Z12lcd_positionhh>
		lcd_write_char(second/10+'0');	// ì´ˆ
 160:	ce 01       	movw	r24, r28
 162:	6a e0       	ldi	r22, 0x0A	; 10
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	80 d0       	rcall	.+256    	; 0x268 <__divmodhi4>
 168:	b8 2e       	mov	r11, r24
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	86 0f       	add	r24, r22
 16e:	c5 df       	rcall	.-118    	; 0xfa <_Z14lcd_write_charh>
		lcd_write_char(second%10+'0');
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	8b 0d       	add	r24, r11
 174:	c2 df       	rcall	.-124    	; 0xfa <_Z14lcd_write_charh>
		lcd_write_char('S');
 176:	83 e5       	ldi	r24, 0x53	; 83
 178:	c0 df       	rcall	.-128    	; 0xfa <_Z14lcd_write_charh>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	83 ed       	ldi	r24, 0xD3	; 211
 17e:	90 e3       	ldi	r25, 0x30	; 48
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x40>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x4a>
 18a:	00 00       	nop
 18c:	21 96       	adiw	r28, 0x01	; 1
		_delay_ms(1000);
		second++;
 18e:	cc 33       	cpi	r28, 0x3C	; 60
		if(second >= 60){
 190:	d1 05       	cpc	r29, r1
 192:	24 f0       	brlt	.+8      	; 0x19c <main+0x5c>
 194:	0f 5f       	subi	r16, 0xFF	; 255
			second=0; minute++;
 196:	1f 4f       	sbci	r17, 0xFF	; 255
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	0c 33       	cpi	r16, 0x3C	; 60
		}
		
		if(minute >= 60){
 19e:	11 05       	cpc	r17, r1
 1a0:	2c f0       	brlt	.+10     	; 0x1ac <main+0x6c>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
			minute = 0;
			hour++;
 1a4:	e2 1a       	sub	r14, r18
 1a6:	f2 0a       	sbc	r15, r18
		if(second >= 60){
			second=0; minute++;
		}
		
		if(minute >= 60){
			minute = 0;
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
			hour++;
		}
		
		lcd_position(8,1);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	ba df       	rcall	.-140    	; 0x126 <_Z12lcd_positionhh>
 1b2:	0f 2e       	mov	r0, r31
		lcd_write_char(minute/10+'0');
 1b4:	fa e0       	ldi	r31, 0x0A	; 10
 1b6:	af 2e       	mov	r10, r31
 1b8:	b1 2c       	mov	r11, r1
 1ba:	f0 2d       	mov	r31, r0
 1bc:	c8 01       	movw	r24, r16
 1be:	b5 01       	movw	r22, r10
 1c0:	53 d0       	rcall	.+166    	; 0x268 <__divmodhi4>
 1c2:	98 2e       	mov	r9, r24
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	86 0f       	add	r24, r22
		lcd_write_char(minute%10+'0');
 1c8:	98 df       	rcall	.-208    	; 0xfa <_Z14lcd_write_charh>
 1ca:	80 e3       	ldi	r24, 0x30	; 48
 1cc:	89 0d       	add	r24, r9
 1ce:	95 df       	rcall	.-214    	; 0xfa <_Z14lcd_write_charh>
		lcd_write_char('M');
 1d0:	8d e4       	ldi	r24, 0x4D	; 77
 1d2:	93 df       	rcall	.-218    	; 0xfa <_Z14lcd_write_charh>
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	93 ed       	ldi	r25, 0xD3	; 211
 1d8:	20 e3       	ldi	r18, 0x30	; 48
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	20 40       	sbci	r18, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x9a>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xa4>
		_delay_ms(1000);
		
		
		lcd_position(4,1);
 1e4:	00 00       	nop
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	84 e0       	ldi	r24, 0x04	; 4
		lcd_write_char(hour/10+'0');
 1ea:	9d df       	rcall	.-198    	; 0x126 <_Z12lcd_positionhh>
 1ec:	c7 01       	movw	r24, r14
 1ee:	b5 01       	movw	r22, r10
 1f0:	3b d0       	rcall	.+118    	; 0x268 <__divmodhi4>
 1f2:	b8 2e       	mov	r11, r24
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	86 0f       	add	r24, r22
 1f8:	80 df       	rcall	.-256    	; 0xfa <_Z14lcd_write_charh>
 1fa:	80 e3       	ldi	r24, 0x30	; 48
		lcd_write_char(hour%10+'0');
 1fc:	8b 0d       	add	r24, r11
 1fe:	7d df       	rcall	.-262    	; 0xfa <_Z14lcd_write_charh>
 200:	88 e4       	ldi	r24, 0x48	; 72
 202:	7b df       	rcall	.-266    	; 0xfa <_Z14lcd_write_charh>
		lcd_write_char('H');
 204:	8d e0       	ldi	r24, 0x0D	; 13
 206:	e8 16       	cp	r14, r24
 208:	f1 04       	cpc	r15, r1
		if(hour >= 13){
 20a:	1c f0       	brlt	.+6      	; 0x212 <main+0xd2>
 20c:	ee 24       	eor	r14, r14
 20e:	e3 94       	inc	r14
 210:	f1 2c       	mov	r15, r1
			hour = 1;
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	2c e0       	ldi	r18, 0x0C	; 12
 216:	e2 16       	cp	r14, r18
		}
		
		if ((hour == 12) & (minute == 0) & (second == 0) )
 218:	f1 04       	cpc	r15, r1
 21a:	09 f0       	breq	.+2      	; 0x21e <main+0xde>
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	01 15       	cp	r16, r1
 222:	11 05       	cpc	r17, r1
 224:	09 f0       	breq	.+2      	; 0x228 <main+0xe8>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	89 23       	and	r24, r25
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	20 97       	sbiw	r28, 0x00	; 0
 22e:	09 f0       	breq	.+2      	; 0x232 <main+0xf2>
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	88 23       	and	r24, r24
 234:	59 f0       	breq	.+22     	; 0x24c <main+0x10c>
 236:	99 23       	and	r25, r25
 238:	49 f0       	breq	.+18     	; 0x24c <main+0x10c>
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	c8 1a       	sub	r12, r24
		{
			AMPM++;
 23e:	d8 0a       	sbc	r13, r24
 240:	92 e0       	ldi	r25, 0x02	; 2
			
			if (AMPM >= 2)
 242:	c9 16       	cp	r12, r25
 244:	d1 04       	cpc	r13, r1
			{
				AMPM = 0;
 246:	14 f0       	brlt	.+4      	; 0x24c <main+0x10c>
 248:	c1 2c       	mov	r12, r1
			}
				
		}
		
		lcd_position(1,1);
 24a:	d1 2c       	mov	r13, r1
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	6a df       	rcall	.-300    	; 0x126 <_Z12lcd_positionhh>
		if(AMPM) lcd_write_char('P');
 252:	c1 14       	cp	r12, r1
 254:	d1 04       	cpc	r13, r1
 256:	19 f0       	breq	.+6      	; 0x25e <main+0x11e>
 258:	80 e5       	ldi	r24, 0x50	; 80
 25a:	4f df       	rcall	.-354    	; 0xfa <_Z14lcd_write_charh>
 25c:	02 c0       	rjmp	.+4      	; 0x262 <main+0x122>
 25e:	81 e4       	ldi	r24, 0x41	; 65
		else lcd_write_char('A');
 260:	4c df       	rcall	.-360    	; 0xfa <_Z14lcd_write_charh>
 262:	8d e4       	ldi	r24, 0x4D	; 77
 264:	4a df       	rcall	.-364    	; 0xfa <_Z14lcd_write_charh>
		
		lcd_write_char('M');
 266:	79 cf       	rjmp	.-270    	; 0x15a <main+0x1a>

00000268 <__divmodhi4>:
 268:	97 fb       	bst	r25, 7
 26a:	07 2e       	mov	r0, r23
	int minute = 59;
	int hour = 11;
	int AMPM = 1;
	
	
	while (1)
 26c:	16 f4       	brtc	.+4      	; 0x272 <__divmodhi4+0xa>
 26e:	00 94       	com	r0
 270:	06 d0       	rcall	.+12     	; 0x27e <__divmodhi4_neg1>
 272:	77 fd       	sbrc	r23, 7
 274:	08 d0       	rcall	.+16     	; 0x286 <__divmodhi4_neg2>
 276:	0b d0       	rcall	.+22     	; 0x28e <__udivmodhi4>
 278:	07 fc       	sbrc	r0, 7
 27a:	05 d0       	rcall	.+10     	; 0x286 <__divmodhi4_neg2>
 27c:	3e f4       	brtc	.+14     	; 0x28c <__divmodhi4_exit>

0000027e <__divmodhi4_neg1>:
 27e:	90 95       	com	r25
 280:	81 95       	neg	r24
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	08 95       	ret

00000286 <__divmodhi4_neg2>:
 286:	70 95       	com	r23
 288:	61 95       	neg	r22
 28a:	7f 4f       	sbci	r23, 0xFF	; 255

0000028c <__divmodhi4_exit>:
 28c:	08 95       	ret

0000028e <__udivmodhi4>:
 28e:	aa 1b       	sub	r26, r26
 290:	bb 1b       	sub	r27, r27
 292:	51 e1       	ldi	r21, 0x11	; 17
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <__udivmodhi4_ep>

00000296 <__udivmodhi4_loop>:
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	a6 17       	cp	r26, r22
 29c:	b7 07       	cpc	r27, r23
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__udivmodhi4_ep>
 2a0:	a6 1b       	sub	r26, r22
 2a2:	b7 0b       	sbc	r27, r23

000002a4 <__udivmodhi4_ep>:
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	5a 95       	dec	r21
 2aa:	a9 f7       	brne	.-22     	; 0x296 <__udivmodhi4_loop>
 2ac:	80 95       	com	r24
 2ae:	90 95       	com	r25
 2b0:	bc 01       	movw	r22, r24
 2b2:	cd 01       	movw	r24, r26
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
